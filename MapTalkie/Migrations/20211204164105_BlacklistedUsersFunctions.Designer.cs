// <auto-generated />
using System;
using MapTalkie.DB.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MapTalkie.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211204164105_BlacklistedUsersFunctions")]
    partial class BlacklistedUsersFunctions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MapTalkie.DB.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_attachments");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_attachments_user_id");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.BlacklistedUser", b =>
                {
                    b.Property<string>("BlockedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("blocked_by_user_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("BlockedByUserId", "UserId")
                        .HasName("pk_blacklisted_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_blacklisted_users_user_id");

                    b.ToTable("blacklisted_users", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.FriendRequest", b =>
                {
                    b.Property<string>("FromId")
                        .HasColumnType("text")
                        .HasColumnName("from_id");

                    b.Property<string>("ToId")
                        .HasColumnType("text")
                        .HasColumnName("to_id");

                    b.HasKey("FromId", "ToId")
                        .HasName("pk_friend_requests");

                    b.HasIndex("ToId")
                        .HasDatabaseName("ix_friend_requests_to_id");

                    b.ToTable("friend_requests", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean")
                        .HasColumnName("available");

                    b.Property<int>("CachedCommentsCount")
                        .HasColumnType("integer")
                        .HasColumnName("cached_comments_count");

                    b.Property<int>("CachedLikesCount")
                        .HasColumnType("integer")
                        .HasColumnName("cached_likes_count");

                    b.Property<int>("CachedSharesCount")
                        .HasColumnType("integer")
                        .HasColumnName("cached_shares_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsOriginalLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("is_original_location");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry(point)")
                        .HasColumnName("location");

                    b.Property<double>("RankDecayFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("rank_decay_factor");

                    b.Property<long?>("SharedId")
                        .HasColumnType("bigint")
                        .HasColumnName("shared_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("SharedId")
                        .HasDatabaseName("ix_posts_shared_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_posts_user_id");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.PostComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean")
                        .HasColumnName("available");

                    b.Property<int>("CachedLikesCount")
                        .HasColumnType("integer")
                        .HasColumnName("cached_likes_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<double>("RankDecayFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("rank_decay_factor");

                    b.Property<long?>("ReplyToId")
                        .HasColumnType("bigint")
                        .HasColumnName("reply_to_id");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_post_comments");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_comments_post_id");

                    b.HasIndex("ReplyToId")
                        .HasDatabaseName("ix_post_comments_reply_to_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_post_comments_sender_id");

                    b.ToTable("post_comments", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.PostCommentLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("UserId", "CommentId")
                        .HasName("pk_post_comment_likes");

                    b.HasIndex("CommentId")
                        .HasDatabaseName("ix_post_comment_likes_comment_id");

                    b.ToTable("post_comment_likes", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.PostLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("UserId", "PostId")
                        .HasName("pk_post_likes");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_likes_post_id");

                    b.ToTable("post_likes", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.PrivateConversationParticipant", b =>
                {
                    b.Property<string>("SenderId")
                        .HasColumnType("text")
                        .HasColumnName("sender_id");

                    b.Property<string>("RecipientId")
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastMessageReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_message_read_at");

                    b.HasKey("SenderId", "RecipientId")
                        .HasName("pk_private_conversation_participants");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_private_conversation_participants_recipient_id");

                    b.ToTable("private_conversation_participants", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.PrivateMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean")
                        .HasColumnName("available");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean")
                        .HasColumnName("read");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_private_messages");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_private_messages_sender_id");

                    b.ToTable("private_messages", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.PrivateMessageReceipt", b =>
                {
                    b.Property<string>("UserIdA")
                        .HasColumnType("text")
                        .HasColumnName("user_id_a");

                    b.Property<string>("UserIdB")
                        .HasColumnType("text")
                        .HasColumnName("user_id_b");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<bool>("OutFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("out_flag");

                    b.Property<string>("UserAId")
                        .HasColumnType("text")
                        .HasColumnName("user_a_id");

                    b.Property<string>("UserBId")
                        .HasColumnType("text")
                        .HasColumnName("user_b_id");

                    b.HasKey("UserIdA", "UserIdB", "MessageId")
                        .HasName("pk_private_message_receipts");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_private_message_receipts_message_id");

                    b.HasIndex("UserAId")
                        .HasDatabaseName("ix_private_message_receipts_user_a_id");

                    b.HasIndex("UserBId")
                        .HasDatabaseName("ix_private_message_receipts_user_b_id");

                    b.ToTable("private_message_receipts", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("AllowsNonFriendMessages")
                        .HasColumnType("boolean")
                        .HasColumnName("allows_non_friend_messages");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<bool>("UsesPrivateLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("uses_private_location");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("MapTalkie.DB.Attachment", b =>
                {
                    b.HasOne("MapTalkie.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attachments_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MapTalkie.DB.BlacklistedUser", b =>
                {
                    b.HasOne("MapTalkie.DB.User", "BlockedByUser")
                        .WithMany()
                        .HasForeignKey("BlockedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_blacklisted_users_users_blocked_by_user_id");

                    b.HasOne("MapTalkie.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_blacklisted_users_users_user_id");

                    b.Navigation("BlockedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MapTalkie.DB.FriendRequest", b =>
                {
                    b.HasOne("MapTalkie.DB.User", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_users_from_id");

                    b.HasOne("MapTalkie.DB.User", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_users_to_id");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("MapTalkie.DB.Post", b =>
                {
                    b.HasOne("MapTalkie.DB.Post", "Shared")
                        .WithMany("Shares")
                        .HasForeignKey("SharedId")
                        .HasConstraintName("fk_posts_posts_shared_id");

                    b.HasOne("MapTalkie.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_users_user_id");

                    b.Navigation("Shared");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MapTalkie.DB.PostComment", b =>
                {
                    b.HasOne("MapTalkie.DB.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_comments_posts_post_id");

                    b.HasOne("MapTalkie.DB.PostComment", "ReplyTo")
                        .WithMany("Comments")
                        .HasForeignKey("ReplyToId")
                        .HasConstraintName("fk_post_comments_post_comments_reply_to_id");

                    b.HasOne("MapTalkie.DB.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_comments_users_sender_id");

                    b.Navigation("Post");

                    b.Navigation("ReplyTo");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MapTalkie.DB.PostCommentLike", b =>
                {
                    b.HasOne("MapTalkie.DB.PostComment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_comment_likes_post_comments_comment_id");

                    b.HasOne("MapTalkie.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_comment_likes_users_user_id");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MapTalkie.DB.PostLike", b =>
                {
                    b.HasOne("MapTalkie.DB.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_likes_posts_post_id");

                    b.HasOne("MapTalkie.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_likes_users_user_id");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MapTalkie.DB.PrivateConversationParticipant", b =>
                {
                    b.HasOne("MapTalkie.DB.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_conversation_participants_users_recipient_id");

                    b.HasOne("MapTalkie.DB.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_conversation_participants_users_sender_id");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MapTalkie.DB.PrivateMessage", b =>
                {
                    b.HasOne("MapTalkie.DB.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_messages_users_sender_id");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MapTalkie.DB.PrivateMessageReceipt", b =>
                {
                    b.HasOne("MapTalkie.DB.PrivateMessage", "Message")
                        .WithMany("Receipts")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_message_receipts_private_messages_message_id");

                    b.HasOne("MapTalkie.DB.User", "UserA")
                        .WithMany()
                        .HasForeignKey("UserAId")
                        .HasConstraintName("fk_private_message_receipts_users_user_a_id");

                    b.HasOne("MapTalkie.DB.User", "UserB")
                        .WithMany()
                        .HasForeignKey("UserBId")
                        .HasConstraintName("fk_private_message_receipts_users_user_b_id");

                    b.Navigation("Message");

                    b.Navigation("UserA");

                    b.Navigation("UserB");
                });

            modelBuilder.Entity("MapTalkie.DB.RefreshToken", b =>
                {
                    b.HasOne("MapTalkie.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MapTalkie.DB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MapTalkie.DB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("MapTalkie.DB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MapTalkie.DB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("MapTalkie.DB.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("MapTalkie.DB.PostComment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MapTalkie.DB.PrivateMessage", b =>
                {
                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
